funcdef void FixedUpdate(float);
void SetFixedUpdate(FixedUpdate @updateCallback);
funcdef void Update(float);
void SetUpdate(Update @updateCallback);
funcdef void Shutdown();
void SetShutdown(Shutdown @shutdownCallback);
void println(const string &in);
void print(const string &in);

class ref{}
funcdef bool less(const ?&in a, const ?&in b);
class array<T>{
	array<T>& opAssign(const array<T>&in);
	T& opIndex(uint index);
	const T& opIndex(uint index) const;
	bool opEquals(const array<T>&in) const;
	bool isEmpty() const;
	uint length() const;
	void resize(uint);
	void reverse();
	void insertAt(uint index, const T& in value);
	void insertAt(uint index, const array<T>& arr);
	void insertLast(const T& in);
	void removeAt(uint index);
	void removeLast();
	void removeRange(uint start, uint count);
	void sortAsc();
	void sortAsc(uint startAt, uint count);
	void sortDesc();
	void sortDesc(uint startAt, uint count);
	void sort(const less &in compareFunc, uint startAt = 0, uint count = uint(-1));
	int find(const T& in);
	int find(uint startAt, const T& in);
	int findByRef(const T& in);
	int findByRef(uint startAt, const T& in);
}
class any{
	//The default constructor creates an empty object, and the second initializes the object with the provided value.
	//The int64 and double overloads make sure that all numbers are converted to 64bit before being stored in the object.
	any();
	any(? &in value);
	any(int64 &in value);
	any(double &in value);
	//The assignment operator will copy the contained value from the other object.
	any &opAssign(const any &in other);
	//These methods sets the value in the object.
	//The int64 and double overloads make sure that all numbers are converted to 64bit before being stored in the object.
	void store(? &in value);
	void store(int64 &in value);
	void store(double &in value);
	//These methods retrieve the value stored in the object. The methods will return true if the stored value is compatible with the requested type.
	bool retrieve(? &out value) const;
	bool retrieve(int64 &out value) const;
	bool retrieve(double &out value) const;
}
class dictionary{
	//Sets a key/value pair in the dictionary. If the key already exists, the value will be changed.
	void set(const string &in key, ? &in value);
	void set(const string &in key, int64 &in value);
	void set(const string &in key, double &in value);
	//Retrieves the value corresponding to the key. The methods return false if the key is not found, and in this case the value will maintain its default value based on the type.
	bool get(const string &in key, ? &out value) const;
	bool get(const string &in key, int64 &out value) const;
	bool get(const string &in key, double &out value) const;
	?& opIndex(const string &in key);
	const ?& opIndex(const string &in key) const;
	//This method returns an array with all of the existing keys in the dictionary. The order of the keys in the array is undefined.
	array<string> @getKeys() const;
	//Returns true if the key exists in the dictionary.
	bool exists(const string &in key) const;
	//Removes the key and the corresponding value from the dictionary. Returns false if the key wasn't found.
	bool delete(const string &in key);
	//Removes all entries in the dictionary.
	void deleteAll();
	//Returns true if the dictionary doesn't hold any entries.
	bool isEmpty() const;
	//Returns the number of keys in the dictionary.
	uint getSize() const;
}
class dictionaryValue{}

class string{
	~string();
	string();
	string(const string&in);
	string& opAssign(const string&in);
	string& opAddAssign(const string&in);
	bool opEquals(const string&in) const;
	int opCmp(const string&in) const;
	string opAdd(const string&in) const;
	uint length() const;
	void resize(uint);
	bool isEmpty() const;
	uint8& opIndex(uint);
	const uint8& opIndex(uint) const;
	string& opAssign(double);
	string& opAddAssign(double);
	string opAdd(double) const;
	string opAdd_r(double) const;
	string& opAssign(float);
	string& opAddAssign(float);
	string opAdd(float) const;
	string opAdd_r(float) const;
	string& opAssign(int64);
	string& opAddAssign(int64);
	string opAdd(int64) const;
	string opAdd_r(int64) const;
	string& opAssign(uint64);
	string& opAddAssign(uint64);
	string opAdd(uint64) const;
	string opAdd_r(uint64) const;
	string& opAssign(bool);
	string& opAddAssign(bool);
	string opAdd(bool) const;
	string opAdd_r(bool) const;
	string substr(uint start = 0, int count = - 1) const;
	int findFirst(const string&in, uint start = 0) const;
	int findFirstOf(const string&in, uint start = 0) const;
	int findFirstNotOf(const string&in, uint start = 0) const;
	int findLast(const string&in, int start = - 1) const;
	int findLastOf(const string&in, int start = - 1) const;
	int findLastNotOf(const string&in, int start = - 1) const;
	void insert(uint pos, const string&in other);
	void erase(uint pos, int count = - 1);
}

int64 parseInt(const string &in str, uint base = 10, uint &out byteCount = 0);
uint64 parseUInt(const string &in str, uint base = 10, uint &out byteCount = 0);
double parseFloat(const string &in, uint &out byteCount = 0);
string formatInt(int64 val, const string &in options = '', uint width = 0);
string formatUInt(uint64 val, const string &in options = '', uint width = 0);
string formatFloat(double val, const string &in options = '', uint width = 0, uint precision = 0);
array<string>@ split(const string &in delimiter) const;
string join(const array<string> &in arr, const string &in delimiter);

class Vector3{
	Vector3();
	Vector3(const Vector3&in);
	Vector3(float x, float y, float z);
	Vector3 opNeg() const;
	Vector3 opAdd(Vector3) const;
	Vector3 opSub(Vector3) const;
	Vector3 opMul(float) const;
	Vector3 opMul(Vector3) const;
	Vector3 opDiv(float) const;
	Vector3 opMul_r(float) const;
	Vector3& opAddAssign(Vector3);
	Vector3& opSubAssign(Vector3);
	Vector3& opMulAssign(float);
	Vector3& opDivAssign(float);
	bool opEquals(const Vector3&in) const;
	float Length() const;
	float x;
	float y;
	float z;
}

class Transform{
	Transform(const Transform@ parent = null);
    Vector3 GetPosition() const;
    void SetPosition(const Vector3 &in);
    Vector3 GetScale() const;
    void SetScale(const Vector3 &in);
    Vector3 GetLocalPosition() const;
    void SetLocalPosition(const Vector3 &in);
    Vector3 GetLocalScale() const;
    void SetLocalScale(const Vector3 &in);
}

class Material{
	Material();
	Material(const string& tag);
}

class Mesh{
	Mesh();
	Mesh(const string& tag);
}

class Renderable{
	Renderable(uint entityId, const Transform@ transform);
	Renderable(const Renderable &in) delete;

	Mesh mesh;
	Material material;
}
