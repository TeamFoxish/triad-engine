// TODO: hide callback setters under namespace
funcdef void FixedUpdate(float);
void SetFixedUpdate(FixedUpdate @updateCallback);
funcdef void Update(float);
void SetUpdate(Update @updateCallback);
funcdef void Shutdown();
void SetShutdown(Shutdown @shutdownCallback);
funcdef void CallbackDestroyComponent(ref@ component);
void SetDestroyComponent(CallbackDestroyComponent @destroyCompCallback);

void println(const string &in);
void log_critical(const string &in);
void log_error(const string &in);
void log_warn(const string &in);
void log_info(const string &in);
void log_debug(const string &in);


funcdef bool less(const ?&in a, const ?&in b);
class array<T>{
	array<T>& opAssign(const array<T>&in);
	T& opIndex(uint index);
	const T& opIndex(uint index) const;
	bool opEquals(const array<T>&in) const;
	bool isEmpty() const;
	uint length() const;
	void resize(uint);
	void reverse();
	void insertAt(uint index, const T& in value);
	void insertAt(uint index, const array<T>& arr);
	void insertLast(const T& in);
	void removeAt(uint index);
	void removeLast();
	void removeRange(uint start, uint count);
	void sortAsc();
	void sortAsc(uint startAt, uint count);
	void sortDesc();
	void sortDesc(uint startAt, uint count);
	void sort(const less &in compareFunc, uint startAt = 0, uint count = uint(-1));
	int find(const T& in);
	int find(uint startAt, const T& in);
	int findByRef(const T& in);
	int findByRef(uint startAt, const T& in);
}
class any{
	//The default constructor creates an empty object, and the second initializes the object with the provided value.
	//The int64 and double overloads make sure that all numbers are converted to 64bit before being stored in the object.
	any();
	any(? &in value);
	any(int64 &in value);
	any(double &in value);
	//The assignment operator will copy the contained value from the other object.
	any &opAssign(const any &in other);
	//These methods sets the value in the object.
	//The int64 and double overloads make sure that all numbers are converted to 64bit before being stored in the object.
	void store(? &in value);
	void store(int64 &in value);
	void store(double &in value);
	//These methods retrieve the value stored in the object. The methods will return true if the stored value is compatible with the requested type.
	bool retrieve(? &out value) const;
	bool retrieve(int64 &out value) const;
	bool retrieve(double &out value) const;
}
any@ CreateObject(const string &in module, const string &in classDeclaration);
class ref{
	ref();
	ref(const ref &in);
	ref(const ?&in);
	void opCast(?&out);
	ref &opHndlAssign(const ref &in);
	ref &opHndlAssign(const ?&in);
	bool opEquals(const ref &in) const;
	bool opEquals(const ?&in) const;
}
class dictionary{
	//Sets a key/value pair in the dictionary. If the key already exists, the value will be changed.
	void set(const string &in key, ? &in value);
	void set(const string &in key, int64 &in value);
	void set(const string &in key, double &in value);
	//Retrieves the value corresponding to the key. The methods return false if the key is not found, and in this case the value will maintain its default value based on the type.
	bool get(const string &in key, ? &out value) const;
	bool get(const string &in key, int64 &out value) const;
	bool get(const string &in key, double &out value) const;
	?& opIndex(const string &in key);
	const ?& opIndex(const string &in key) const;
	//This method returns an array with all of the existing keys in the dictionary. The order of the keys in the array is undefined.
	array<string> @getKeys() const;
	//Returns true if the key exists in the dictionary.
	bool exists(const string &in key) const;
	//Removes the key and the corresponding value from the dictionary. Returns false if the key wasn't found.
	bool delete(const string &in key);
	//Removes all entries in the dictionary.
	void deleteAll();
	//Returns true if the dictionary doesn't hold any entries.
	bool isEmpty() const;
	//Returns the number of keys in the dictionary.
	uint getSize() const;
}
class dictionaryValue{}

class string{
	~string();
	string();
	string(const string&in);
	string& opAssign(const string&in);
	string& opAddAssign(const string&in);
	bool opEquals(const string&in) const;
	int opCmp(const string&in) const;
	string opAdd(const string&in) const;
	uint length() const;
	void resize(uint);
	bool isEmpty() const;
	uint8& opIndex(uint);
	const uint8& opIndex(uint) const;
	string& opAssign(double);
	string& opAddAssign(double);
	string opAdd(double) const;
	string opAdd_r(double) const;
	string& opAssign(float);
	string& opAddAssign(float);
	string opAdd(float) const;
	string opAdd_r(float) const;
	string& opAssign(int64);
	string& opAddAssign(int64);
	string opAdd(int64) const;
	string opAdd_r(int64) const;
	string& opAssign(uint64);
	string& opAddAssign(uint64);
	string opAdd(uint64) const;
	string opAdd_r(uint64) const;
	string& opAssign(bool);
	string& opAddAssign(bool);
	string opAdd(bool) const;
	string opAdd_r(bool) const;
	string substr(uint start = 0, int count = - 1) const;
	int findFirst(const string&in, uint start = 0) const;
	int findFirstOf(const string&in, uint start = 0) const;
	int findFirstNotOf(const string&in, uint start = 0) const;
	int findLast(const string&in, int start = - 1) const;
	int findLastOf(const string&in, int start = - 1) const;
	int findLastNotOf(const string&in, int start = - 1) const;
	void insert(uint pos, const string&in other);
	void erase(uint pos, int count = - 1);
}

int64 parseInt(const string &in str, uint base = 10, uint &out byteCount = 0);
uint64 parseUInt(const string &in str, uint base = 10, uint &out byteCount = 0);
double parseFloat(const string &in, uint &out byteCount = 0);
string formatInt(int64 val, const string &in options = '', uint width = 0);
string formatUInt(uint64 val, const string &in options = '', uint width = 0);
string formatFloat(double val, const string &in options = '', uint width = 0, uint precision = 0);
array<string>@ split(const string &in delimiter) const;
string join(const array<string> &in arr, const string &in delimiter);

namespace Math {
const float Pi;

float DegToRad(float deg);
float RadToDeg(float rad);

uint8 Max(uint8, uint8);
uint16 Max(uint16, uint16);
uint Max(uint, uint);
uint64 Max(uint64, uint64);
int8 Max(int8, int8);
int16 Max(int16, int16);
int Max(int, int);
int64 Max(int64, int64);
float Max(float, float);
double Max(double, double);
uint8 Min(uint8, uint8);
uint16 Min(uint16, uint16);
uint Min(uint, uint);
uint64 Min(uint64, uint64);
int8 Min(int8, int8);
int16 Min(int16, int16);
int Min(int, int);
int64 Min(int64, int64);
float Min(float, float);
double Min(double, double);
uint8 Clamp(uint8, uint8, uint8);
uint16 Clamp(uint16, uint16, uint16);
uint Clamp(uint, uint, uint);
uint64 Clamp(uint64, uint64, uint64);
int8 Clamp(int8, int8, int8);
int16 Clamp(int16, int16, int16);
int Clamp(int, int, int);
int64 Clamp(int64, int64, int64);
float Clamp(float, float, float);
double Clamp(double, double, double);
int8 Abs(int8);
int16 Abs(int16);
int Abs(int);
int64 Abs(int64);
float Abs(float);
double Abs(double);

// Trigonometric functions
float cos(float rad);
float sin(float rad);
float tan(float rad);

// Inverse trigonometric functions
float acos(float val);
float asin(float val);
float atan(float val);
float atan2(float y, float x);

// Hyperbolic functions
float cosh(float rad);
float sinh(float rad);
float tanh(float rad);

// Logarithmic functions
float log(float val);
float log10(float val);

// Power to
float pow(float val, float exp);

// Square root
float sqrt(float val);

// Absolute value
float abs(float val);

// Ceil and floor functions
float ceil(float val);
float floor(float val);

// Returns the fraction
float fraction(float val);

// Approximate float comparison, to deal with numeric imprecision
bool closeTo(float a, float b, float epsilon = 0.00001f);
bool closeTo(double a, double b, double epsilon = 0.0000000001);

// Conversion between floating point and IEEE 754 representations
float  fpFromIEEE(uint raw); 
double fpFromIEEE(uint64 raw);
uint   fpToIEEE(float fp);
uint64 fpToIEEE(double fp);

class Vector3{
	Vector3();
	Vector3(const Vector3&in);
	Vector3(float x, float y, float z);
	Vector3 opNeg() const;
	Vector3 opAdd(Vector3) const;
	Vector3 opSub(Vector3) const;
	Vector3 opMul(float) const;
	Vector3 opMul(Vector3) const;
	Vector3 opDiv(float) const;
	Vector3 opMul_r(float) const;
	Vector3& opAddAssign(Vector3);
	Vector3& opSubAssign(Vector3);
	Vector3& opMulAssign(float);
	Vector3& opDivAssign(float);
	bool opEquals(const Vector3&in) const;
	float Length() const;
	float LengthSq() const;
	void Clamp(const Vector3 &in min, const Vector3 &in max);
	Vector3 Cross(const Vector3 &in other);
	float Dot(const Vector3 &in other);
	void Normalize();
	Vector3 NormalizedCopy() const;
	Vector3 Transform(const Quaternion &in quat) const;
	void Transform(const Quaternion &in quat);
	float x;
	float y;
	float z;
}

float Vector3Distance(const Vector3 &in a, const Vector3 &in b);
float Vector3DistanceSq(const Vector3 &in a, const Vector3 &in b);
Vector3 Vector3Reflect(const Vector3 &in vec, const Vector3 &in normal);
Vector3 Lerp(const Vector3 &in a, const Vector3 &in b, float t);
Vector3 SmoothStep(const Vector3 &in a, const Vector3 &in b, float t);
Vector3 Max(const Vector3 &in a, const Vector3 &in b);
Vector3 Min(const Vector3 &in a, const Vector3 &in b);
float Dot(const Vector3 &in a, const Vector3 &in b);
Vector3 Cross(const Vector3 &in a, const Vector3 &in b);
Vector3 Clamp(const Vector3 &in v, const Vector3 &in min, const Vector3 &in max);

Vector3 Vector3Transform(const Vector3 &in v, const Quaternion &in quat);

const Vector3 Vector3Forward; // (0, 0, -1)
const Vector3 Vector3Right;   // (1, 0, 0)
const Vector3 Vector3Up;      // (0, 1, 0)
const Vector3 Vector3Zero;    // (0, 0, 0)

class Quaternion{
	Quaternion();
	Quaternion(const Quaternion&in);
	Quaternion(float x, float y, float z, float w);
	Quaternion opNeg() const;
	Quaternion opAdd(Quaternion) const;
	Quaternion opSub(Quaternion) const;
	Quaternion opMul(Quaternion) const;
	Quaternion opMul(float) const;
	Quaternion opMul_r(float) const;
	Quaternion opDiv(Quaternion) const;
	Quaternion& opAddAssign(Quaternion);
	Quaternion& opSubAssign(Quaternion);
	Quaternion& opMulAssign(Quaternion);
	Quaternion& opMulAssign(float);
	Quaternion& opDivAssign(Quaternion);
	bool opEquals(const Quaternion&in) const;
	float Length() const;
	float LengthSq() const;
	void Inverse(Quaternion &out) const;
	Vector3 ToEuler() const;
	void RotateTowards(const Quaternion &in, float maxAngle);
	void Normalize();
	float x;
	float y;
	float z;
	float w;
}

Quaternion QuaternionFromYawPitchRoll(float yaw, float pitch, float roll); // in radians
Quaternion QuaternionFromAxisAngle(const Vector3 &in axis, float angle); // angle in radians
Quaternion QuaternionFromToRotation(const Vector3 &in a, const Vector3 &in b);
Quaternion QuaternionFromLookRotation(const Vector3 &in forward, const Vector3 &in up);
Quaternion QuaternionConcatenate(const Quaternion &in a, const Quaternion &in b);
Quaternion Lerp(const Quaternion &in a, const Quaternion &in b, float t);
Quaternion Slerp(const Quaternion &in a, const Quaternion &in b, float t);
float QuaternionAngle(const Quaternion &in a, const Quaternion &in b);

const Quaternion QuaternionIdentity;

class Transform{
	Transform(const Transform@ parent = null);
	Transform @opAssign(const Transform@);
    Vector3 GetPosition() const;
    void SetPosition(const Vector3 &in);
	Quaternion GetRotation() const;
	void SetRotation(const Quaternion &in);
    Vector3 GetScale() const;
    void SetScale(const Vector3 &in);
    Vector3 GetLocalPosition() const;
    void SetLocalPosition(const Vector3 &in);
	Quaternion GetLocalRotation() const;
	void SetLocalRotation(const Quaternion &in);
    Vector3 GetLocalScale() const;
    void SetLocalScale(const Vector3 &in);
}
} // Math

class ResourceHandle{
	ResourceHandle(const string &in tag);
	bool IsValid() const;
}

class SoftRef<T>{
	SoftRef(const string &in tag);
	bool IsValid() const;
	T& Load() const;
}

namespace Scene {
typedef uint64 EntityId;
const EntityId EntityInvalidId; // handle id = -1, gen = -1
bool IsValidEntity(EntityId id);
EntityId GetEntityIdUnderCursor();

class Entity{
	ref@ entity;
	EntityId parent;
    string name;
    bool isComposite;
}

namespace Tree {
    EntityId AddEntity(Entity &in entity);
    void AddEntityTransform(EntityId id, const Math::Transform@ transform);
    void RemoveEntity(EntityId id);
	ref@ GetEntityById(EntityId id);
}
} // Scene

class Material{
	Material();
	Material(const string& tag);
}

class Mesh{
	Mesh();
	Mesh(const string& tag);
}

class Renderable{
	Renderable();
	Renderable(uint64 entityId, const Math::Transform@ transform);
	Renderable(const Renderable &in) delete;

	void SetIsStatic(bool isStatic);

	Mesh mesh;
	Material material;
}

class DirectionalLight{
	DirectionalLight();
	DirectionalLight(const Math::Transform@);

	Math::Vector3 GetColor() const;
	void SetColor(const Math::Vector3 &in color);
}

class PointLight{
	PointLight();
	PointLight(const Math::Transform@);

	Math::Vector3 GetColor() const;
	void SetColor(const Math::Vector3 &in color);
	float GetIntensity() const;
	void SetIntensity(float intensity);
	float GetRadius() const;
	void SetRadius(float radius);
}

class Camera{
	Camera();
	Camera(const Math::Transform@);

	void MakePerspective();
	void MakeOrthographic();
	void SetFov(float fovDeg);
	void SetLookTrasnform(const Math::Vector3 &in camPos, const Math::Vector3 &in target, const Math::Vector3 &in up);
	void SetActive();

	private bool activateAtInit;
}

namespace Sound{
class Event{
	Event();

	bool IsValid() const; // never access invalid event
	void Play();
	void Restart();
	void Stop(bool allowFadeOut = true);
	void Pause();
	void Resume();
    void SetPaused(bool pause);
    float GetVolume() const;
    void SetVolume(float volume);
    float GetPitch() const;
    void SetPitch(float pitch);
    float GetParameter(const string &in name) const;
    void SetParameter(const string &in name, float value);
    bool Is3D() const;
    void Set3DAttributes(const Math::Transform@ transform) const;
}

namespace System{
    Event PlayEvent(const string &in name);
	void PlaySoundFile(const string &in path, float volume, bool isLoop, bool is3D, const Math::Transform@ transform = null);
}
}

namespace Physics{
	class ShapeSphere{
		float radius;
	}

	class ShapeBox{
		Math::Vector3 GetHalfExtent() const;
		void SetHalfExtent(const Math::Vector3 &in);
	}

	class ShapeTaperedCylinder{
		float halfHeight;
		float topRadius; 
		float bottomRadius;
	}

	class PhysBody{
		PhysBody &opAssign(const PhysBody &in);
		void InitFromShape(Scene::EntityId id, const ShapeSphere &in);
		void InitFromShape(Scene::EntityId id, const ShapeBox &in);
		void InitFromShape(Scene::EntityId id, const ShapeTaperedCylinder &in);
	}
}

namespace Navigation{
	array<Math::Vector3>@ FindPath(const ResourceHandle &in agent, const Math::Vector3 &in from, const Math::Vector3 &in to);
}

// typedefs for complex types are unsupported
// typedef ResourceHandle Scene;
namespace Game{
namespace Impl{
	ref@ CreateScene(const ResourceHandle &in scene);
	ref@ SpawnPrefab(const ResourceHandle &in prefab, ref@ parent = null);
	ref@ SpawnComponent(const ResourceHandle &in compRef, ref@ parent = null);
}
}

namespace Input{
bool IsKeyDown(Key key);
bool IsKeyHold(Key key);
bool IsKeyUp(Key key);

void GetMousePosition(float &out x, float &out y);
void GetMouseOffset(float &out x, float &out y);

class UIElement {
	UIElement();
	UIElement @opAssign(const UIElement@);
	string GetText() const;
	void SetText(const string &in);
	Math::Vector3 GetPosition() const;
	void SetPosition(const Math::Vector3 &in);
	Math::Vector3 GetScale() const;
	void SetScale(const Math::Vector3 &in);
	Math::Vector3 GetColor() const;
	void SetColor(const Math::Vector3 &in);
	float GetDepth() const;
	void SetDepth(const float &in);
}

enum Key{
	None,
	LeftButton,
	RightButton,
	MiddleButton,
	MouseButtonX1,
	MouseButtonX2,
	MouseButtonX3,
	WheelUp,
	WheelDown,
	Back,
	Tab,
	Enter,
	Pause,
	CapsLock,
	Kana,
	Kanji,
	Escape,
	ImeConvert,
	ImeNoConvert,
	Space,
	PageUp,
	PageDown,
	End,
	Home,
	Left,
	Up,
	Right,
	Down,
	Select,
	Print,
	Execute,
	PrintScreen,
	Insert,
	Delete,
	Help,
	D0,
	D1,
	D2,
	D3,
	D4,
	D5,
	D6,
	D7,
	D8,
	D9,
	A,
	B,
	C,
	D,
	E,
	F,
	G,
	H,
	I,
	J,
	K,
	L,
	M,
	N,
	O,
	P,
	Q,
	R,
	S,
	T,
	U,
	V,
	W,
	X,
	Y,
	Z,
	LeftWindows,
	RightWindows,
	Apps,
	Sleep,
	NumPad0,
	NumPad1,
	NumPad2,
	NumPad3,
	NumPad4,
	NumPad5,
	NumPad6,
	NumPad7,
	NumPad8,
	NumPad9,
	Multiply,
	Add,
	Separator,
	Subtract,
	Decimal,
	Divide,
	F1,
	F2,
	F3,
	F4,
	F5,
	F6,
	F7,
	F8,
	F9,
	F10,
	F11,
	F12,
	F13,
	F14,
	F15,
	F16,
	F17,
	F18,
	F19,
	F20,
	F21,
	F22,
	F23,
	F24,
	NumLock,
	Scroll,
	LeftShift,
	RightShift,
	LeftControl,
	RightControl,
	LeftAlt,
	RightAlt,
	BrowserBack,
	BrowserForward,
	BrowserRefresh,
	BrowserStop,
	BrowserSearch,
	BrowserFavorites,
	BrowserHome,
	VolumeMute,
	VolumeDown,
	VolumeUp,
	MediaNextTrack,
	MediaPreviousTrack,
	MediaStop,
	MediaPlayPause,
	LaunchMail,
	SelectMedia,
	LaunchApplication1,
	LaunchApplication2,
	OemSemicolon,
	OemPlus,
	OemComma,
	OemMinus,
	OemPeriod,
	OemQuestion,
	OemTilde,
	ChatPadGreen,
	ChatPadOrange,
	OemOpenBrackets,
	OemPipe,
	OemCloseBrackets,
	OemQuotes,
	Oem8,
	OemBackslash,
	ProcessKey,
	OemCopy,
	OemAuto,
	OemEnlW,
	Attn,
	Crsel,
	Exsel,
	EraseEof,
	Play,
	Zoom,
	Pa1,
	OemClear
}
} // Input
